{
  "address": "0xcC9d557C8002a7665dD558eDcA6fE3705C84b78e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minEntranceFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Dashboard__NotEnoughETHToAddPost",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Dashboard__NotEnoughETHToBuyItemFromThePost",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Dashboard__NotItemExist",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPrior",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "image",
          "type": "string"
        }
      ],
      "name": "ItemAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "ItemBuyed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postId",
          "type": "uint256"
        }
      ],
      "name": "BuyItemFromThePost",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_title",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_image",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_checkInput",
          "type": "bool"
        }
      ],
      "name": "addPost",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "base64Prefix",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPost",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "isPrior",
              "type": "bool"
            }
          ],
          "internalType": "struct Dashboard.Post",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPostIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPosts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "postIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPosts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb4669e3e8998e2d9030cebbb82c70c158140cedfe0026625966871c127ef3f91",
  "receipt": {
    "to": null,
    "from": "0x98c84EbEE75BbE405e4Ffdcc9a5E4CC8769A0CD3",
    "contractAddress": "0xcC9d557C8002a7665dD558eDcA6fE3705C84b78e",
    "transactionIndex": 2,
    "gasUsed": "1076862",
    "logsBloom": "0x
    "blockHash": "0xd49b1813f0b24f53aac2d3d605ced785795e7946c43823e649fabe8737309520",
    "transactionHash": "0xb4669e3e8998e2d9030cebbb82c70c158140cedfe0026625966871c127ef3f91",
    "logs": [],
    "blockNumber": 3999197,
    "cumulativeGasUsed": "1203515",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000"
  ],
  "numDeployments": 11,
  "solcInputHash": "4940f77fd3931cab76b6704c341f31d8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minEntranceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Dashboard__NotEnoughETHToAddPost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Dashboard__NotEnoughETHToBuyItemFromThePost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Dashboard__NotItemExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPrior\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"}],\"name\":\"ItemAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"ItemBuyed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postId\",\"type\":\"uint256\"}],\"name\":\"BuyItemFromThePost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_title\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_checkInput\",\"type\":\"bool\"}],\"name\":\"addPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"base64Prefix\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isPrior\",\"type\":\"bool\"}],\"internalType\":\"struct Dashboard.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPostIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"postIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPosts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Dashboard.sol\":\"Dashboard\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/Dashboard.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\nimport 'base64-sol/base64.sol';\\n\\nerror Dashboard__NotEnoughETHToAddPost();\\nerror Dashboard__NotEnoughETHToBuyItemFromThePost();\\nerror Dashboard__NotItemExist();\\n\\ncontract Dashboard {\\n  address private immutable i_owner;\\n  uint256 private immutable i_minEntranceFee;\\n  uint256 public totalPosts;\\n  uint256[] public postIds;\\n  string public constant base64Prefix = 'data:image/svg+xml;base64,';\\n\\n  constructor(uint256 minEntranceFee) payable {\\n    i_owner = payable(msg.sender);\\n    i_minEntranceFee = minEntranceFee;\\n  }\\n\\n  event ItemAdded(\\n    address indexed sender,\\n    string description,\\n    string title,\\n    uint256 price,\\n    uint256 id,\\n    bool isPrior,\\n    string image\\n  );\\n\\n  event ItemBuyed(address indexed buyer, uint256 id, uint256 price);\\n\\n  struct Post {\\n    address sender;\\n    string description;\\n    string title;\\n    uint256 price;\\n    uint256 id;\\n    string image;\\n    bool isPrior;\\n  }\\n\\n  mapping(uint256 => Post) posts;\\n\\n  function addPost(\\n    string memory _description,\\n    string memory _title,\\n    string memory _image,\\n    uint256 _price,\\n    bool _checkInput\\n  ) public payable {\\n    if (msg.value < i_minEntranceFee) {\\n      revert Dashboard__NotEnoughETHToAddPost();\\n    }\\n\\n    Post storage newPost = posts[totalPosts];\\n\\n    newPost.description = _description;\\n    newPost.title = _title;\\n    newPost.price = _price;\\n    newPost.image = _image;\\n    newPost.sender = msg.sender;\\n    newPost.id = totalPosts;\\n    newPost.isPrior = _checkInput == true ? true : false;\\n    postIds.push(totalPosts);\\n    emit ItemAdded(msg.sender, _description, _title, _price, totalPosts, _checkInput, _image);\\n\\n    totalPosts += 1;\\n  }\\n\\n  function BuyItemFromThePost(uint256 postId) public payable {\\n    if (posts[postId].sender == address(0)) {\\n      revert Dashboard__NotItemExist();\\n    }\\n    if (msg.value < posts[postId].price) {\\n      revert Dashboard__NotEnoughETHToBuyItemFromThePost();\\n    }\\n\\n    payable(posts[postId].sender).transfer(msg.value);\\n    delete posts[postId];\\n    emit ItemBuyed(msg.sender, postId, msg.value);\\n  }\\n\\n  function getMinEntranceFee() external view returns (uint256) {\\n    return i_minEntranceFee;\\n  }\\n\\n  function getTotalPosts() external view returns (uint256) {\\n    return totalPosts;\\n  }\\n\\n  function getPostIds() external view returns (uint256[] memory) {\\n    return postIds;\\n  }\\n\\n  function getPost(uint256 id) external view returns (Post memory) {\\n    return posts[id];\\n  }\\n}\\n\",\"keccak256\":\"0x298d289d00602a873d8032c84b8ec3ba05cec02be7a3717b9ded99e15a66d059\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c060405260405162001389380380620013898339818101604052810190620000299190620000ac565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508060a0818152505050620000de565b600080fd5b6000819050919050565b620000868162000071565b81146200009257600080fd5b50565b600081519050620000a6816200007b565b92915050565b600060208284031215620000c557620000c46200006c565b5b6000620000d58482850162000095565b91505092915050565b60805160a051611281620001086000396000818161049f015261072d0152600050506112816000f3fe6080604052600436106100865760003560e01c806345568b471161005957806345568b471461013a57806350cde8ef1461015657806359b6629b146101935780635fe226b4146101be5780638e53fb41146101e957610086565b806301e6953d1461008b5780633ae9ccd7146100a75780633b35c517146100d257806340731c24146100fd575b600080fd5b6100a560048036038101906100a09190610b23565b610214565b005b3480156100b357600080fd5b506100bc610462565b6040516100c99190610be9565b60405180910390f35b3480156100de57600080fd5b506100e761049b565b6040516100f49190610c1a565b60405180910390f35b34801561010957600080fd5b50610124600480360381019061011f9190610b23565b6104c3565b6040516101319190610d94565b60405180910390f35b610154600480360381019061014f9190610f17565b61072b565b005b34801561016257600080fd5b5061017d60048036038101906101789190610b23565b610916565b60405161018a9190610c1a565b60405180910390f35b34801561019f57600080fd5b506101a861093a565b6040516101b59190611095565b60405180910390f35b3480156101ca57600080fd5b506101d3610992565b6040516101e09190610c1a565b60405180910390f35b3480156101f557600080fd5b506101fe61099b565b60405161020b9190610c1a565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156102b1576040517f83437e5900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600082815260200190815260200160002060030154341015610301576040517f7fc96fbe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561037d573d6000803e3d6000fd5b5060026000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006103c991906109a1565b6002820160006103d991906109a1565b600382016000905560048201600090556005820160006103f991906109a1565b6006820160006101000a81549060ff021916905550503373ffffffffffffffffffffffffffffffffffffffff167f31a4a21d5ff09323bc941066531c509780fe768445d89f8d3dd07ad1c1d5cc0a82346040516104579291906110b7565b60405180910390a250565b6040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6104cb6109e1565b600260008381526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461054f9061110f565b80601f016020809104026020016040519081016040528092919081815260200182805461057b9061110f565b80156105c85780601f1061059d576101008083540402835291602001916105c8565b820191906000526020600020905b8154815290600101906020018083116105ab57829003601f168201915b505050505081526020016002820180546105e19061110f565b80601f016020809104026020016040519081016040528092919081815260200182805461060d9061110f565b801561065a5780601f1061062f5761010080835404028352916020019161065a565b820191906000526020600020905b81548152906001019060200180831161063d57829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820180546106879061110f565b80601f01602080910402602001604051908101604052809291908181526020018280546106b39061110f565b80156107005780601f106106d557610100808354040283529160200191610700565b820191906000526020600020905b8154815290600101906020018083116106e357829003601f168201915b505050505081526020016006820160009054906101000a900460ff1615151515815250509050919050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610785576040517f8ac3e00b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060026000805481526020019081526020016000209050858160010190805190602001906107b5929190610a36565b50848160020190805190602001906107ce929190610a36565b50828160030181905550838160050190805190602001906107f0929190610a36565b50338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005481600401819055506001151582151514610852576000610855565b60015b8160060160006101000a81548160ff021916908315150217905550600160005490806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167fe379b168852b24eec3470c65533944cd31189323ddb8ae13094542e96ce6ef70878786600054878a6040516108ed96959493929190611150565b60405180910390a2600160008082825461090791906111f5565b92505081905550505050505050565b6001818154811061092657600080fd5b906000526020600020016000915090505481565b6060600180548060200260200160405190810160405280929190818152602001828054801561098857602002820191906000526020600020905b815481526020019060010190808311610974575b5050505050905090565b60008054905090565b60005481565b5080546109ad9061110f565b6000825580601f106109bf57506109de565b601f0160209004906000526020600020908101906109dd9190610abc565b5b50565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016000815260200160008152602001606081526020016000151581525090565b828054610a429061110f565b90600052602060002090601f016020900481019282610a645760008555610aab565b82601f10610a7d57805160ff1916838001178555610aab565b82800160010185558215610aab579182015b82811115610aaa578251825591602001919060010190610a8f565b5b509050610ab89190610abc565b5090565b5b80821115610ad5576000816000905550600101610abd565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610b0081610aed565b8114610b0b57600080fd5b50565b600081359050610b1d81610af7565b92915050565b600060208284031215610b3957610b38610ae3565b5b6000610b4784828501610b0e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b8a578082015181840152602081019050610b6f565b83811115610b99576000848401525b50505050565b6000601f19601f8301169050919050565b6000610bbb82610b50565b610bc58185610b5b565b9350610bd5818560208601610b6c565b610bde81610b9f565b840191505092915050565b60006020820190508181036000830152610c038184610bb0565b905092915050565b610c1481610aed565b82525050565b6000602082019050610c2f6000830184610c0b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c6082610c35565b9050919050565b610c7081610c55565b82525050565b600082825260208201905092915050565b6000610c9282610b50565b610c9c8185610c76565b9350610cac818560208601610b6c565b610cb581610b9f565b840191505092915050565b610cc981610aed565b82525050565b60008115159050919050565b610ce481610ccf565b82525050565b600060e083016000830151610d026000860182610c67565b5060208301518482036020860152610d1a8282610c87565b91505060408301518482036040860152610d348282610c87565b9150506060830151610d496060860182610cc0565b506080830151610d5c6080860182610cc0565b5060a083015184820360a0860152610d748282610c87565b91505060c0830151610d8960c0860182610cdb565b508091505092915050565b60006020820190508181036000830152610dae8184610cea565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610df882610b9f565b810181811067ffffffffffffffff82111715610e1757610e16610dc0565b5b80604052505050565b6000610e2a610ad9565b9050610e368282610def565b919050565b600067ffffffffffffffff821115610e5657610e55610dc0565b5b610e5f82610b9f565b9050602081019050919050565b82818337600083830152505050565b6000610e8e610e8984610e3b565b610e20565b905082815260208101848484011115610eaa57610ea9610dbb565b5b610eb5848285610e6c565b509392505050565b600082601f830112610ed257610ed1610db6565b5b8135610ee2848260208601610e7b565b91505092915050565b610ef481610ccf565b8114610eff57600080fd5b50565b600081359050610f1181610eeb565b92915050565b600080600080600060a08688031215610f3357610f32610ae3565b5b600086013567ffffffffffffffff811115610f5157610f50610ae8565b5b610f5d88828901610ebd565b955050602086013567ffffffffffffffff811115610f7e57610f7d610ae8565b5b610f8a88828901610ebd565b945050604086013567ffffffffffffffff811115610fab57610faa610ae8565b5b610fb788828901610ebd565b9350506060610fc888828901610b0e565b9250506080610fd988828901610f02565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061101e8383610cc0565b60208301905092915050565b6000602082019050919050565b600061104282610fe6565b61104c8185610ff1565b935061105783611002565b8060005b8381101561108857815161106f8882611012565b975061107a8361102a565b92505060018101905061105b565b5085935050505092915050565b600060208201905081810360008301526110af8184611037565b905092915050565b60006040820190506110cc6000830185610c0b565b6110d96020830184610c0b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061112757607f821691505b6020821081141561113b5761113a6110e0565b5b50919050565b61114a81610ccf565b82525050565b600060c082019050818103600083015261116a8189610bb0565b9050818103602083015261117e8188610bb0565b905061118d6040830187610c0b565b61119a6060830186610c0b565b6111a76080830185611141565b81810360a08301526111b98184610bb0565b9050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061120082610aed565b915061120b83610aed565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112405761123f6111c6565b5b82820190509291505056fea2646970667358221220107a39deb991b0815f550a8be689eb09657f9268b69eeff758c1d662dcd4d3e364736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c806345568b471161005957806345568b471461013a57806350cde8ef1461015657806359b6629b146101935780635fe226b4146101be5780638e53fb41146101e957610086565b806301e6953d1461008b5780633ae9ccd7146100a75780633b35c517146100d257806340731c24146100fd575b600080fd5b6100a560048036038101906100a09190610b23565b610214565b005b3480156100b357600080fd5b506100bc610462565b6040516100c99190610be9565b60405180910390f35b3480156100de57600080fd5b506100e761049b565b6040516100f49190610c1a565b60405180910390f35b34801561010957600080fd5b50610124600480360381019061011f9190610b23565b6104c3565b6040516101319190610d94565b60405180910390f35b610154600480360381019061014f9190610f17565b61072b565b005b34801561016257600080fd5b5061017d60048036038101906101789190610b23565b610916565b60405161018a9190610c1a565b60405180910390f35b34801561019f57600080fd5b506101a861093a565b6040516101b59190611095565b60405180910390f35b3480156101ca57600080fd5b506101d3610992565b6040516101e09190610c1a565b60405180910390f35b3480156101f557600080fd5b506101fe61099b565b60405161020b9190610c1a565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156102b1576040517f83437e5900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600082815260200190815260200160002060030154341015610301576040517f7fc96fbe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600082815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561037d573d6000803e3d6000fd5b5060026000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006103c991906109a1565b6002820160006103d991906109a1565b600382016000905560048201600090556005820160006103f991906109a1565b6006820160006101000a81549060ff021916905550503373ffffffffffffffffffffffffffffffffffffffff167f31a4a21d5ff09323bc941066531c509780fe768445d89f8d3dd07ad1c1d5cc0a82346040516104579291906110b7565b60405180910390a250565b6040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c00000000000081525081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6104cb6109e1565b600260008381526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201805461054f9061110f565b80601f016020809104026020016040519081016040528092919081815260200182805461057b9061110f565b80156105c85780601f1061059d576101008083540402835291602001916105c8565b820191906000526020600020905b8154815290600101906020018083116105ab57829003601f168201915b505050505081526020016002820180546105e19061110f565b80601f016020809104026020016040519081016040528092919081815260200182805461060d9061110f565b801561065a5780601f1061062f5761010080835404028352916020019161065a565b820191906000526020600020905b81548152906001019060200180831161063d57829003601f168201915b5050505050815260200160038201548152602001600482015481526020016005820180546106879061110f565b80601f01602080910402602001604051908101604052809291908181526020018280546106b39061110f565b80156107005780601f106106d557610100808354040283529160200191610700565b820191906000526020600020905b8154815290600101906020018083116106e357829003601f168201915b505050505081526020016006820160009054906101000a900460ff1615151515815250509050919050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610785576040517f8ac3e00b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060026000805481526020019081526020016000209050858160010190805190602001906107b5929190610a36565b50848160020190805190602001906107ce929190610a36565b50828160030181905550838160050190805190602001906107f0929190610a36565b50338160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060005481600401819055506001151582151514610852576000610855565b60015b8160060160006101000a81548160ff021916908315150217905550600160005490806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167fe379b168852b24eec3470c65533944cd31189323ddb8ae13094542e96ce6ef70878786600054878a6040516108ed96959493929190611150565b60405180910390a2600160008082825461090791906111f5565b92505081905550505050505050565b6001818154811061092657600080fd5b906000526020600020016000915090505481565b6060600180548060200260200160405190810160405280929190818152602001828054801561098857602002820191906000526020600020905b815481526020019060010190808311610974575b5050505050905090565b60008054905090565b60005481565b5080546109ad9061110f565b6000825580601f106109bf57506109de565b601f0160209004906000526020600020908101906109dd9190610abc565b5b50565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016000815260200160008152602001606081526020016000151581525090565b828054610a429061110f565b90600052602060002090601f016020900481019282610a645760008555610aab565b82601f10610a7d57805160ff1916838001178555610aab565b82800160010185558215610aab579182015b82811115610aaa578251825591602001919060010190610a8f565b5b509050610ab89190610abc565b5090565b5b80821115610ad5576000816000905550600101610abd565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610b0081610aed565b8114610b0b57600080fd5b50565b600081359050610b1d81610af7565b92915050565b600060208284031215610b3957610b38610ae3565b5b6000610b4784828501610b0e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b8a578082015181840152602081019050610b6f565b83811115610b99576000848401525b50505050565b6000601f19601f8301169050919050565b6000610bbb82610b50565b610bc58185610b5b565b9350610bd5818560208601610b6c565b610bde81610b9f565b840191505092915050565b60006020820190508181036000830152610c038184610bb0565b905092915050565b610c1481610aed565b82525050565b6000602082019050610c2f6000830184610c0b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c6082610c35565b9050919050565b610c7081610c55565b82525050565b600082825260208201905092915050565b6000610c9282610b50565b610c9c8185610c76565b9350610cac818560208601610b6c565b610cb581610b9f565b840191505092915050565b610cc981610aed565b82525050565b60008115159050919050565b610ce481610ccf565b82525050565b600060e083016000830151610d026000860182610c67565b5060208301518482036020860152610d1a8282610c87565b91505060408301518482036040860152610d348282610c87565b9150506060830151610d496060860182610cc0565b506080830151610d5c6080860182610cc0565b5060a083015184820360a0860152610d748282610c87565b91505060c0830151610d8960c0860182610cdb565b508091505092915050565b60006020820190508181036000830152610dae8184610cea565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610df882610b9f565b810181811067ffffffffffffffff82111715610e1757610e16610dc0565b5b80604052505050565b6000610e2a610ad9565b9050610e368282610def565b919050565b600067ffffffffffffffff821115610e5657610e55610dc0565b5b610e5f82610b9f565b9050602081019050919050565b82818337600083830152505050565b6000610e8e610e8984610e3b565b610e20565b905082815260208101848484011115610eaa57610ea9610dbb565b5b610eb5848285610e6c565b509392505050565b600082601f830112610ed257610ed1610db6565b5b8135610ee2848260208601610e7b565b91505092915050565b610ef481610ccf565b8114610eff57600080fd5b50565b600081359050610f1181610eeb565b92915050565b600080600080600060a08688031215610f3357610f32610ae3565b5b600086013567ffffffffffffffff811115610f5157610f50610ae8565b5b610f5d88828901610ebd565b955050602086013567ffffffffffffffff811115610f7e57610f7d610ae8565b5b610f8a88828901610ebd565b945050604086013567ffffffffffffffff811115610fab57610faa610ae8565b5b610fb788828901610ebd565b9350506060610fc888828901610b0e565b9250506080610fd988828901610f02565b9150509295509295909350565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061101e8383610cc0565b60208301905092915050565b6000602082019050919050565b600061104282610fe6565b61104c8185610ff1565b935061105783611002565b8060005b8381101561108857815161106f8882611012565b975061107a8361102a565b92505060018101905061105b565b5085935050505092915050565b600060208201905081810360008301526110af8184611037565b905092915050565b60006040820190506110cc6000830185610c0b565b6110d96020830184610c0b565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061112757607f821691505b6020821081141561113b5761113a6110e0565b5b50919050565b61114a81610ccf565b82525050565b600060c082019050818103600083015261116a8189610bb0565b9050818103602083015261117e8188610bb0565b905061118d6040830187610c0b565b61119a6060830186610c0b565b6111a76080830185611141565b81810360a08301526111b98184610bb0565b9050979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061120082610aed565b915061120b83610aed565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156112405761123f6111c6565b5b82820190509291505056fea2646970667358221220107a39deb991b0815f550a8be689eb09657f9268b69eeff758c1d662dcd4d3e364736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/Dashboard.sol:Dashboard",
        "label": "totalPosts",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 132,
        "contract": "contracts/Dashboard.sol:Dashboard",
        "label": "postIds",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 197,
        "contract": "contracts/Dashboard.sol:Dashboard",
        "label": "posts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Post)192_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Post)192_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Dashboard.Post)",
        "numberOfBytes": "32",
        "value": "t_struct(Post)192_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Post)192_storage": {
        "encoding": "inplace",
        "label": "struct Dashboard.Post",
        "members": [
          {
            "astId": 179,
            "contract": "contracts/Dashboard.sol:Dashboard",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 181,
            "contract": "contracts/Dashboard.sol:Dashboard",
            "label": "description",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 183,
            "contract": "contracts/Dashboard.sol:Dashboard",
            "label": "title",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 185,
            "contract": "contracts/Dashboard.sol:Dashboard",
            "label": "price",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 187,
            "contract": "contracts/Dashboard.sol:Dashboard",
            "label": "id",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 189,
            "contract": "contracts/Dashboard.sol:Dashboard",
            "label": "image",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 191,
            "contract": "contracts/Dashboard.sol:Dashboard",
            "label": "isPrior",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}